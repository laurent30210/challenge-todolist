[{"/var/www/html/spe/Challenge__todoList/todolist/FRONT/src/index.tsx":"1","/var/www/html/spe/Challenge__todoList/todolist/FRONT/src/components/App/index.tsx":"2","/var/www/html/spe/Challenge__todoList/todolist/FRONT/src/components/Form/index.tsx":"3","/var/www/html/spe/Challenge__todoList/todolist/FRONT/src/components/Tasks/index.tsx":"4","/var/www/html/spe/Challenge__todoList/todolist/FRONT/src/reportWebVitals.ts":"5"},{"size":300,"mtime":1611686864341,"results":"6","hashOfConfig":"7"},{"size":1079,"mtime":1611957655613,"results":"8","hashOfConfig":"7"},{"size":1338,"mtime":1611995036814,"results":"9","hashOfConfig":"7"},{"size":4763,"mtime":1611995979870,"results":"10","hashOfConfig":"7"},{"size":425,"mtime":1611603097586,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"16uwbmm",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"14"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"/var/www/html/spe/Challenge__todoList/todolist/FRONT/src/index.tsx",[],["24","25"],"/var/www/html/spe/Challenge__todoList/todolist/FRONT/src/components/App/index.tsx",[],"/var/www/html/spe/Challenge__todoList/todolist/FRONT/src/components/Form/index.tsx",[],"/var/www/html/spe/Challenge__todoList/todolist/FRONT/src/components/Tasks/index.tsx",["26"],"import React, { useState } from 'react';\nimport { Task } from '../../../src/interfaces/Task';\nimport axios from 'axios';\n\n// import CSS\nimport './Tasks.scss';\n\ninterface TasksProps {\n    tasks: Array<Task>;\n    getDataFromAPI: () => void;\n};\n\nconst Tasks: React.FC<TasksProps> = ({ tasks, getDataFromAPI }) =>  {\n\n    const [valueTask, setvalueTask] = useState<string>(\"\");\n    const [editTaskId, setEditTaskId] = useState<string>(\"\");\n    \n// REMOVE TASK\n    const removeTask = (event: React.MouseEvent<HTMLElement, MouseEvent>) => {  \n        // GET ID   \n        const taskId: string = (event.target as HTMLDataElement).id;\n        // REQUEST \n        axios.delete(`http://localhost:1337/tasks/${taskId}`)\n        .then((response) => {\n          console.log(response.status);\n        })\n        .catch((error) => {\n          console.error(error);\n        })\n        .finally(() => {\n            // REFRESH LIST WITH A NEW REQUEST\n            getDataFromAPI()\n        });        \n    };\n// TASK COMPLETED\n    const completedTask = (event: React.ChangeEvent<HTMLInputElement>) => { \n        // GET ID   \n        const taskId: string = event.target.id;\n        // GET VALUE CHECKBOX\n        const completed: boolean = event.target.checked;\n\n        axios({\n            method: 'put',\n            url: `http://localhost:1337/tasks/${taskId}`,\n            headers: { \n              'Content-Type': 'application/json'\n            },\n            data: {\n              \"completed\": completed\n            }\n        })\n        .catch((error) => {\n          console.error(error);\n        })\n        .finally(() => {\n            // REFRESH LIST WITH A NEW REQUEST\n            getDataFromAPI()\n        });\n    }; \n// SHOW LABEL IF TASK SELECTED\n    const displayInput = (event: React.MouseEvent<HTMLLabelElement, MouseEvent>) => {\n        setEditTaskId((event.target as HTMLDataElement).id);\n    }; \n// GET A NEW VALUE\n    const updateTask = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setvalueTask((event.target as HTMLDataElement).value);\n    };\n// SUBMIT THE NEW TASK\n    const submitUpdateTask = (event: React.FormEvent) => {\n        event.preventDefault();\n\n        if (!valueTask || /^s*$/.test(valueTask)) {\n            return;\n        } \n        if (/^[<>:]/.test(valueTask)) {\n            return;\n        }\n                axios({\n                    method: 'put',\n                    url: `http://localhost:1337/tasks/${editTaskId}`,\n                    headers: { \n                      'Content-Type': 'application/json'\n                    },\n                    data: {\n                      \"content\": valueTask\n                    }\n                })\n                .catch((error) => {\n                  console.error(error);\n                })\n                .finally(() => {\n                    // REFRESH LIST AND INITIALIZE STATE\n                    getDataFromAPI();\n                    setvalueTask('');\n                    setEditTaskId('');\n                });\n\n    };\n\n\n    return (\n        <form\n            onSubmit={submitUpdateTask}\n        >\n            <ul className=\"tasks\">\n                {tasks.map((task) =>(\n                    <li key={task.id} className={task.completed ? 'task task--completed' : 'task'}>\n                        {editTaskId == task.id ? ( \n                            <input\n                                className=\"task-input\"\n                                type=\"text\"\n                                id={task.id}\n                                placeholder=\"mode Ã©dition\"\n                                value={valueTask}\n                                onChange={updateTask}\n                                \n                            />\n                                )\n                                : <label\n                                className={task.completed ? 'task-label task-label--completed' : 'task-label'}\n                                id={task.id}\n                                onClick={displayInput}\n                            >\n                                {task.content}\n                            </label> }  \n                    <div className=\"task-containerBtn\">\n                        <input\n                          type=\"checkbox\"\n                          id={task.id}\n                          defaultChecked={task.completed}\n                          onChange={completedTask}\n                        />\n                        <i\n                        id={task.id}\n                        className=\"fas fa-trash button button-trash\"\n                        onClick={removeTask}\n                        />\n                    </div>\n                </li>\n                ))}\n            </ul>\n        </form>\n    );\n};\n\n\n\nexport default Tasks;\n","/var/www/html/spe/Challenge__todoList/todolist/FRONT/src/reportWebVitals.ts",[],{"ruleId":"27","replacedBy":"28"},{"ruleId":"29","replacedBy":"30"},{"ruleId":"31","severity":1,"message":"32","line":108,"column":37,"nodeType":"33","messageId":"34","endLine":108,"endColumn":39},"no-native-reassign",["35"],"no-negated-in-lhs",["36"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation"]